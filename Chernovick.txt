Для того чтобы изобразить ясную картину происходящего в текущем проекте, было придумано это костыльное приложение.
Благодаря нему, можно понять что не хватает, а что есть лишнее в теории дипломной работы.
Самая важная часть этого приложения будет заключаться в прогонке алгоритмов и составление/корректирование модели

Небольшая текстовая необходимость:
    Есть 3 класса - это EXPERT, TASK, ANSWER
        Что хранится в EXPERT и что он будет делать?
        Его сведения, которые необходимы для распределения заданий и ответов и он будет проверять бланки(бланк - это слияние ответа и задания)

        Что хранится в TASK?
        информация о задании, который должен быть как-то связан с ответом

        Что хранится в ANSWER?
        тоже самое что и в TASK
    Че там по алгоритмам
    Че там по ситуации для мониторинга

What i want/see
1. Инициализация всех необходимых параметров.
    1.1) Создание простых объектов, которые должны быть взаимосвязаны между с собой
    1.2) Сделать небольшой интерфейс для отображения пока что созданных обхектов
    1.3) Создать базовые методы взаимодействия двух классов



Записи ступоров моей головы:
  а как мне связывать ответ и задания, пока что-то я не пойму.\
  Че то я крч понял, что мы можем передавать параметры объекта задания в класс ответа, толька как

  А а че помимо задания и ответа нужно еще типа подобие Кима сделать надо(только не пойму зачем чет я еблан)

  Еще нужно сделать класс мероприятия)) я думаю он нужен для будущего слияния

  А где хранить созданных экспертов через стримлит?

  # Генерация машины
def generate_car():
    make = random.choice(make_list)
    model = random.choice(model_list)
    year = random.choice(year_list)
    car = Car(make, model, year)
    car_list.append(car)

# Отображение списка машин
def view_cars():
    st.write("Список машин:")
    for i, car in enumerate(car_list):
        st.write(f"{i+1}. {car.make} {car.model} {car.year}")

# Главная страница
def main():
    st.write("Добавить случайную машину")
    if st.button("Добавить машину"):
        generate_car()
        st.write(f"{car_list[-1].make} {car_list[-1].model} {car_list[-1].year} добавлен!")

# Страница со списком машин
def car_page():
    view_cars()

# Главная страница и навигация
st.sidebar.title("Навигация")
pages = {"Добавить машину": main, "Список машин": car_page}
selection = st.sidebar.radio("Перейти на", list(pages.keys()))
page = pages[selection]
page()